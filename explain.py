import google.generativeai as genai
import os

# Configure Gemini with your API key
# For local testing, it's convenient to set it directly or via os.getenv.
# In a deployed application, consider more secure ways to manage API keys.
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "AIzaSyAkYti-yiB1uH4ucQXh_sqXRlbQisUClWI")
genai.configure(api_key=GOOGLE_API_KEY)

# Load the Gemini 2.5 Pro model
model = genai.GenerativeModel("gemini-2.5-pro")

def generate_explanation(job_description: str, candidate: dict) -> str:
    """
    Generates a natural-language explanation for why a candidate is a good fit
    for a given job description using the Gemini 2.5 Pro model.

    This function directly implements the "Generate Explanations (explain.py)" task
    as described in the project documentation.

    Args:
        job_description (str): The full text of the job description.
        candidate (dict): A dictionary containing the candidate's details.
                          Expected keys: "name", "job_title", "skills" (list of strings),
                          and "summary".

    Returns:
        str: A short and clear explanation generated by Gemini, or an error message.
    """
    # Extract candidate details, providing empty strings/lists as defaults
    # to prevent errors if a key is missing.
    name = candidate.get("name", "")
    job_title = candidate.get("job_title", "")
    # Join skills into a comma-separated string for the prompt
    skills = ", ".join(candidate.get("skills", []))
    summary = candidate.get("summary", "")

    # Craft the prompt exactly as specified in the project documentation.
    # This prompt guides the AI to act as a recruiter assistant and explain the fit.
    prompt = f"""
You are an AI assistant for recruiters.

Here is a job description:
{job_description}

Here is a candidate:
Name: {name}
Job Title: {job_title}
Skills: {skills}
Summary: {summary}

Explain why this candidate is a good fit for the job. Keep it short and clear.
"""

    # Send the crafted prompt to the Gemini model for content generation.
    # Includes basic error handling for API calls.
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        # Return a user-friendly error message if the API call fails.
        return f"An error occurred while generating the explanation: {e}"

# This block allows the script to be run directly for interactive testing
# and demonstrates the functionality of the 'explain.py' component.
if __name__ == "__main__":
    print("--- explain.py: Candidate Fit Explanation Generator ---")
    print("This script simulates the 'explain.py' functionality by taking user input")
    print("for a job description and a single candidate, then generates an explanation.")
    print("------------------------------------------------------")

    # --- Take user input for Job Description ---
    print("\n--- Enter Job Description ---")
    job_description_lines = []
    print("Type or paste the job description. Type 'END' on a new line to finish:")
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        job_description_lines.append(line)
    user_job_description = "\n".join(job_description_lines)

    # --- Take user input for Candidate Details ---
    print("\n--- Enter Candidate Details ---")
    user_name = input("Candidate Name: ")
    user_job_title = input("Candidate Job Title: ")
    # Prompt for skills and parse them into a list
    user_skills_str = input("Candidate Skills (comma-separated, e.g., Python, SQL, ML): ")
    user_skills = [s.strip() for s in user_skills_str.split(',') if s.strip()]

    user_summary_lines = []
    print("Candidate Summary (type 'END' on a new line to finish):")
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        user_summary_lines.append(line)
    user_summary = "\n".join(user_summary_lines)

    # Compile user input into the candidate dictionary format expected by generate_explanation
    user_candidate = {
        "name": user_name,
        "job_title": user_job_title,
        "skills": user_skills,
        "summary": user_summary
    }

    print("\nGenerating explanation using Gemini 2.5 Pro...")
    # Call the explanation generation function with user-provided data
    explanation = generate_explanation(user_job_description, user_candidate)

    print("\n--- Generated Explanation ---")
    print(explanation)
    print("\n-----------------------------")
